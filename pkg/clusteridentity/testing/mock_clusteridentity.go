// Copyright 2024 Antrea Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

// Code generated by MockGen. DO NOT EDIT.
// Source: antrea.io/antrea/pkg/clusteridentity (interfaces: ClusterIdentityProvider)
//
// Generated by this command:
//
//	mockgen -copyright_file hack/boilerplate/license_header.raw.txt -destination pkg/clusteridentity/testing/mock_clusteridentity.go -package testing antrea.io/antrea/pkg/clusteridentity ClusterIdentityProvider
//
// Package testing is a generated GoMock package.
package testing

import (
	reflect "reflect"
	time "time"

	clusteridentity "antrea.io/antrea/pkg/clusteridentity"
	gomock "go.uber.org/mock/gomock"
)

// MockClusterIdentityProvider is a mock of ClusterIdentityProvider interface.
type MockClusterIdentityProvider struct {
	ctrl     *gomock.Controller
	recorder *MockClusterIdentityProviderMockRecorder
}

// MockClusterIdentityProviderMockRecorder is the mock recorder for MockClusterIdentityProvider.
type MockClusterIdentityProviderMockRecorder struct {
	mock *MockClusterIdentityProvider
}

// NewMockClusterIdentityProvider creates a new mock instance.
func NewMockClusterIdentityProvider(ctrl *gomock.Controller) *MockClusterIdentityProvider {
	mock := &MockClusterIdentityProvider{ctrl: ctrl}
	mock.recorder = &MockClusterIdentityProviderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClusterIdentityProvider) EXPECT() *MockClusterIdentityProviderMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockClusterIdentityProvider) Get() (clusteridentity.ClusterIdentity, time.Time, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get")
	ret0, _ := ret[0].(clusteridentity.ClusterIdentity)
	ret1, _ := ret[1].(time.Time)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Get indicates an expected call of Get.
func (mr *MockClusterIdentityProviderMockRecorder) Get() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockClusterIdentityProvider)(nil).Get))
}
